/*
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/

/*
Right away this is interesting in that we've got multiple input values and multiple output values.
For input we've got our series and the number of adjacent digits to be considered.
For output we've got the adjacent digits which have the greatest product, and the value of that product.

Off the top of my head, I'm thinking two inputs, series and num, and an array of arrays as output [[...values], product].

Becaue anything times 0 is 0, the input should be converted to string and seperated on 0.
Each of the resultant strings can then be considered, provided they are longer than the target adjacency.
If no substring is at least the length of the target adjacency, zero should be returned.

Within the substrings, the first N values should be multiplied together. Then, to consider the next set, that product need
only be divided by the first vale in the current set, and mutiplied by the last value in the next.

At each step, if the prodect is higher than any other product yet found, each value in the set should be pushed to a new array,
and the array and the product of its value set as the result.

When all sets of all substrings have been considered, the result should be returned.
*/

/*
Brute Force Solution

let largestProduct = (series, target) => {
  let result = [[], 0];
  let substrings = series.split('0');
  let lines = [];
  for (let i = 0; i < substrings.length; i++) {
    if (substrings[i].length < target) {
      continue;
    }
    lines.push(substrings[i]);
  }
  for (let i = 0; i < lines.length; i++) {
    let currentValue = 1;
    for (let j = 0; j < target; j++) {
      currentValue *= parseInt(lines[i][j], 10);
    }
    if (currentValue > result[1]) {
      result[1] = currentValue;
      result[0] = [];
      for (let k = 0; k < target; k++) {
        result[0].push(parseInt(lines[i][k], 10));
      }
    }
    for (let l = target; l < lines[i].length; l++) {
      currentValue /= parseInt(lines[i][l - target], 10);
      currentValue *= parseInt(lines[i][l], 10);
      if (currentValue > result[1]) {
        result[1] = currentValue;
        result[0] = [];
        for (let k = l - target; k < l; k++) {
          result[0].push(parseInt(lines[i][k + 1], 10));
        }
      }
    }
  }
  return result;
}

largestProduct('7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450', 4);
>[[9, 9, 8, 9] 5832]

largestProduct('7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450', 13);
>[[5, 5, 7, 6, 6, 8, 9, 6, 6, 4, 8, 9, 5], 23514624000]

*/
