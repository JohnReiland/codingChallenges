/*

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/

/*
Much like problem 1, I can see a brute force method and suspect there is a higher method using math

The brute force method is to create an even-valued-fibonacci-squence-generating function which terminates at 4M.
Then run it and sum the values it outputs.

The higher method uses math insights to jump directly to the solution.
*/

/*
BRUTE FORCE SOLUTION

let evenFibonacciNumbers = (number) => {
  let result = 0;
  let newValue;
  let low = 1;
  let high = 2;
  while (high <= number) {
    if (high % 2 === 0) {
      result += high;
    }
    newValue = low + high;
    low = high;
    high = newValue;
  }
  return result;
}

evenFibonacciNumbers(2);
>2
2 is the only even value in the Fibonacci sequence not greater than 2.

evenFibonacciNumbers(15);
>10
2 and 8 are the even values in the Fibonacci sequence not greater than 15.

evenFibonacciNumbers(40);
>44
2, 8, and 34 are the even values in the Fibonacci sequence not greater than 40.

evenFibonacciNumbers(150);
>188
2, 8, 34, and 144 are the even values in the Fibonacci sequence not greater than 150.

evenFibonacciNumbers(4000000);
>4613732
The sum of all even values in the Fibonacci sequence not greater than 4M is 4613732.


This solution seems to perform remarkably well. Suspiciously so.
It can quickly sum all even values in the Fibonacci sequence not greater than 9 quintillion.
(19728565855693988000)
With further testing I can confirm the solution works correctly. It's able to sum the values quickly because values in the Fibonacci sequence grow larger at such a quick rate that it takes relatively few steps in the sequence to reach numbers like 4 million or 9 quintillion.

The 31st Fibonacci number is greater than 4M, and the 90th Fibonacci number is greater than 9 quintillion.

This solution works well enugh for such large, I'm not sure a higher method is worth the effort. Instead I'll refactor for object oriented programming.
*/


/*
OBJECT ORIENTED SOLUTION



let evenFibonacciNumbers = (number) => {
  let result = 0;
  let low = 1;
  let high = 2;
  let fibonacci = () => {
    let newValue = low + high;
    low = high;
    high = newValue;
  }
  while (high <= number) {
    if (high % 2 === 0) {
      result += high;
    }
    fibonacci();
  }
  return result;
}

Refactor only. As expected, performs identically to original solution.

evenFibonacciNumbers(2);
>2
2 is the only even value in the Fibonacci sequence not greater than 2.

evenFibonacciNumbers(15);
>10
2 and 8 are the even values in the Fibonacci sequence not greater than 15.

evenFibonacciNumbers(40);
>44
2, 8, and 34 are the even values in the Fibonacci sequence not greater than 40.

evenFibonacciNumbers(150);
>188
2, 8, 34, and 144 are the even values in the Fibonacci sequence not greater than 150.

evenFibonacciNumbers(4000000);
>4613732
The sum of all even values in the Fibonacci sequence not greater than 4M is 4613732.
*/
